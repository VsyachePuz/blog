<!DOCTYPE html>
<html>
<head>
<meta charset="utf8" />
<title>Как написать Applet для панели</title>
</head>
<body>

<table><tr><td style="vertical-align:top;">
<h1>Как написать Applet для панели</h1>
</td><td style="vertical-align:top;">
<a href="..//index.htm">Блог Всячепуза</a>
<br />
&nbsp;
</td></tr></table>
<a href="http://kde-apps.org/content/show.php?content=18046">http://kde-apps.org/content/show.php?content=18046</a>
<br />
<a href="https://wiki.ubuntu.com/DesktopExperienceTeam/ApplicationIndicators">https://wiki.ubuntu.com/DesktopExperienceTeam/ApplicationIndicators</a>
<br />
<a href="http://wandathefish.com/blog">http://wandathefish.com/blog</a>
<br />
<a href="https://wiki.ubuntu.com/CustomStatusMenuDesignGuidelines">https://wiki.ubuntu.com/CustomStatusMenuDesignGuidelines</a>
<br />
<br />
Статья-туториал:
<br />
2004, <a href="https://projects.gnome.org/ORBit2/appletstutorial.html">https://projects.gnome.org/ORBit2/appletstutorial.html</a>
<br />
Используется другой макрос, и это позволяет работать с DBus вместо Bonobo, вот дока по этому поводу:
<br />
2012-12-01, <a href="http://wiki.mate-desktop.org/matecorba_to_dbus">http://wiki.mate-desktop.org/matecorba_to_dbus</a>
<br />
In addition to the mate-panel-applet file we use a D-Bus service file so that applets can be started by the session bus.
<br />
It's a normal D-Bus file <i>org.mate.panel.applet.MateWnckletFactory.service.in</i>
<pre class="code ini"><span class="re0"><span class="br0">[</span>D-BUS Service<span class="br0">]</span></span>
<span class="re1">Name</span><span class="sy0">=</span><span class="re2">org.mate.panel.applet.MateWnckletFactory</span>
<span class="re1">Exec</span><span class="sy0">=</span><span class="re2">@LOCATION@</span></pre>
<br />
Демо-исходники, использующие новый макрос:
<br />
2013-03-13, <a href="https://github.com/mate-desktop/mate-university">https://github.com/mate-desktop/mate-university</a>
<br />
В этом примере инклюдятся заголовочные файлы:
<br />
#include &lt;<a href="https://github.com/mate-desktop/mate-panel/blob/master/libmate-panel-applet/mate-panel-applet.h">mate-panel-applet.h</a>&gt;
<br />
#include &lt;<a href="https://github.com/mate-desktop/mate-panel/blob/master/libmate-panel-applet/mate-panel-applet-gsettings.h">mate-panel-applet-gsettings.h</a>&gt;
<br />
И через макрос вызывается функция
<br />
static gboolean university_factory (<a href="https://github.com/mate-desktop/mate-panel/blob/67c9f12a0d4188b546284efec2d0cd1b90f9052d/libmate-panel-applet/mate-panel-applet.h#L70-L80">MatePanelApplet</a>* applet, const char* iid, gpointer data)
<br />
Надо расковырять, как работает макрос 
<a href="https://github.com/mate-desktop/mate-panel/blob/67c9f12a0d4188b546284efec2d0cd1b90f9052d/libmate-panel-applet/mate-panel-applet.h#L150-L184">MATE_PANEL_APPLET_OUT_PROCESS_FACTORY</a>. 
<br />
Он реализовывает main, принимает параметры командной строки, которые передаёт в gtk,
<br />
и заворачивает из в Gtk-объекты.
<br />
внутри вызывается функция
<a href="https://github.com/mate-desktop/mate-panel/blob/67c9f12a0d4188b546284efec2d0cd1b90f9052d/libmate-panel-applet/mate-panel-applet.c#L2552-L2594">mate_panel_applet_factory_main</a>
<br />
оттуда
<br />
<a href="https://github.com/mate-desktop/mate-panel/blob/47e68c0dc594e3d99e7955e569aa3c20f777e446/libmate-panel-applet/mate-panel-applet-factory.c#L84-L97">mate_panel_applet_factory_new</a>
и 
<a href="https://github.com/mate-desktop/mate-panel/blob/47e68c0dc594e3d99e7955e569aa3c20f777e446/libmate-panel-applet/mate-panel-applet-factory.c#L245-L261">mate_panel_applet_factory_register_service</a>
<br />
создаётся объект-структура <a href="https://github.com/mate-desktop/mate-panel/blob/47e68c0dc594e3d99e7955e569aa3c20f777e446/libmate-panel-applet/mate-panel-applet-factory.c#L26-L33">MatePanelAppletFactory</a>
<br />
<pre><xmp>
struct _MatePanelAppletFactory {
	GObject    base;

	gchar     *factory_id;
	guint      n_applets;
	GType      applet_type;
	GClosure  *closure;
};
</xmp></pre>
указатель на функцию, обрабатывающую вызов, передаётся внутри closure (вместе с указателем на данные для функции)
<br />
<a href="https://github.com/mate-desktop/mate-panel/blob/67c9f12a0d4188b546284efec2d0cd1b90f9052d/libmate-panel-applet/mate-panel-applet.c#L2577">кладётся</a> в локальный-на-стеке указатель factory
<br />
этот указатель на объект <a href="https://github.com/mate-desktop/mate-panel/blob/47e68c0dc594e3d99e7955e569aa3c20f777e446/libmate-panel-applet/mate-panel-applet-factory.c#L251">регистрируется</a> в dbus при помощи функции
g_bus_own_name
<br />
Ещё раз, что происходит:
<br />
1) апплет запускается как процесс (потому что это описано в метафайле для панели)
<br />
2) апплет создаёт сервис для dbus и регистрирует этот сервис
<br />
3) панель вызывает сервис через dbus, передавая ему параметры
<br />
Что тут неясно?
<br />
<font style="color:red">Как формируется параметр applet (при вызыве через dbus), то есть как описать его (независимо от C-кода, например на другом языке)?</font>
<br />
Where "MatePanelApplet* applet" parameter of DBus call is described?
I want to implement DBus service on language which is not related to C,
so I wish to see the description of DBus interface for applets.
<br />
<font style="color:red">Зачем нужно отдельное описание сервиса для dbus, если аплет регистрирует сервис при запуске?
<br />
Why one need to register his custom mate-panel-applet service in dbus with configuration file, if applet's code registers the service at startup?
</font>


<br />
<br />
В чём проблема с пониманием? в исходном туториале отсутствуют ссылки на всё.
Что такое <a href="bonobo.htm">Bonobo</a>, как обычно пишут Gtk+ приложения и т.д.,

<h2>System Tray Protocol Specification</h2>
<a href="http://standards.freedesktop.org/systemtray-spec/latest/">http://standards.freedesktop.org/systemtray-spec/latest/</a>
<br />
Чем mate-panel-applet-ы лучше чем иконки в системном трее?
<br />
Почему вообще существует два механизма?
<br />
System trays are not specific to Gnome.
<br />
 As a general rule, applications provide an icon by following the .



<br />
с какой версии mate переходит на <a href="dbus.htm">DBus</a> ?
<br />
All mate-panel applets need to be ported to libmatepanelapplet-4.0 and gsettings.
<br />
<br />
<a href="mate-applets.htm">mate-applets</a>
<br />
<br />
Gnome Panel
<br />
<br />
Technically, applets are Bonobo controls embedded in the Gnome panel.
<br />
each applet requires a <strong>.server</strong> file, which contains a description of the Bonobo capabilities.
<br />
<pre><xmp>
<oaf_info>
<oaf_server iid="OAFIID:ExampleApplet_Factory" type="exe"
            location="/usr/lib/gnome-panel/myexample">

        <oaf_attribute name="repo_ids" type="stringv">
                <item value="IDL:Bonobo/GenericFactory:1.0"/>
                <item value="IDL:Bonobo/Unknown:1.0"/>
        </oaf_attribute>
        <oaf_attribute name="name" type="string" value="Example Applet Factory"/> <!-- название аплета -->
        <oaf_attribute name="description" type="string" value="Factory to create the example applet"/> <!-- описание аплета -->
</oaf_server>

<oaf_server iid="OAFIID:ExampleApplet" type="factory"
            location="OAFIID:ExampleApplet_Factory">

        <oaf_attribute name="repo_ids" type="stringv">
                <item value="IDL:GNOME/Vertigo/PanelAppletShell:1.0"/>
                <item value="IDL:Bonobo/Control:1.0"/>
                <item value="IDL:Bonobo/Unknown:1.0"/>
        </oaf_attribute>
        <oaf_attribute name="name" type="string" value="Example Applet"/>
        <oaf_attribute name="description" type="string" value="An example applet"/>
        <oaf_attribute name="panel:category" type="string" value="Amusements"/>
        <oaf_attribute name="panel:icon" type="string" value="myicon.png"/>
</oaf_server>
</oaf_info>
</xmp></pre>
Bonobo
<br />
/usr/lib/gnome-panel/myexample - путь до выполняемого файла
<br />
<strong>Example Applet Factory.server</strong> file, and is usually placed in /usr/lib/bonobo/servers/
<br />
<pre>
# ls -1 /usr/lib/bonobo/servers/
Bonobo_CosNaming_NamingContext.server
Bonobo_Moniker_std.server
GNOME_Moniker_std.server
</pre>
<br />
How does Gnome find the link between our C code and the .server file?
<br />
<font style="color:red">а разве не наоборот - только что же искали бинарник по пути, записанному в .server-file
<br />
зачем потребовалось искать .server-файл по бинарнику?</font>
<br />
(они наверное хотят сказать, что адрес функции <strong>myexample_applet_fill</strong> запихивается в этот макрос)
<br />
<br />
That's resolved by the call to PANEL_APPLET_BONOBO_FACTORY.
<br />
<br />
<pre><xmp>
#include <string.h>

#include <panel-applet.h>
#include <gtk/gtklabel.h>

static gboolean
myexample_applet_fill (PanelApplet *applet,
   const gchar *iid,
   gpointer data)
{
	GtkWidget *label;

	if (strcmp (iid, "OAFIID:ExampleApplet") != 0)
		return FALSE;

	label = gtk_label_new ("Hello World");
	gtk_container_add (GTK_CONTAINER (applet), label);

	gtk_widget_show_all (GTK_WIDGET (applet));

	return TRUE;
}

PANEL_APPLET_BONOBO_FACTORY ("OAFIID:ExampleApplet_Factory",
                             PANEL_TYPE_APPLET,
                             "The Hello World Applet",
                             "0",
                             myexample_applet_fill,
                             NULL);
</xmp></pre>

<h2>Icon</h2>
Our applet will be represented by the icon myicon.png, which needs to be placed in /usr/share/pixmaps/

<h2>libpanel-applet library</h2>
PKG_CONFIG_PATH environment variable must contain the path to libpanelapplet-2.0.pc
<br />
<br />
bash$ PKG_CONFIG_PATH=/usr/lib/pkgconfig
<br />
bash$ export $PKG_CONFIG_PATH
<br />
bash$ gcc $(pkg-config --cflags --libs libpanelapplet-2.0) -o my_applet my_applet.c
<br />
possible error:
<br />
Package libpanelapplet-2.0 was not found in the pkg-config search path.
<br />
Perhaps you should add the directory containing `libpanelapplet-2.0.pc'
<br />
to the PKG_CONFIG_PATH environment variable
<br />
No package 'libpanelapplet-2.0' found
<br />
<br />

</body>
</html>
