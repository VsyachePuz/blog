<!DOCTYPE html>
<html>
<head>
<meta charset="utf8" />
<title>How to rewrite EBNF into BNF</title>
</head>
<body>

<table><tr><td style="vertical-align:top;">
<h1>How to rewrite EBNF into BNF</h1>
</td><td style="vertical-align:top;">
<a href="http://stackoverflow.com/questions/2466484/converting-ebnf-to-bnf">EBNF -&gt; BNF</a>
<br />
<a href="http://stackoverflow.com/questions/14922242/how-to-convert-bnf-to-ebnf">BNF -&gt; EBNF</a>
</td></tr></table>

EBNF have 3 additional constructs:
<br />
- repetitions
<br />
- optional parts
<br />
- alternatives

<h2>Repetitions</h2>
Can be replaced with additional recursive rule
<br />
<br />
A := B, { C }, D ; (* repetition of C *)
<br />
can be replaced with
<br />
A0 := ;
<br />
A0 := C, A0; // supplementary rule, which express repetition through tail recursion
<br />
A1 := B, A0, D; (* final rule = A *)
<br />
<br />
I don't know the reason, why { } mean 0 to many repetitions instead of 1 to many.

<h2>Optional parts</h2>
A := B, [ C ], D ; (* C is optional *)
<br />
replaced with 2 rules
<br />
A1 := B, D ;
<br />
A1 := B, C, D ;
<br />
<br />
What if there N optional parts (and 2<sup>N</sup> variants of their presence)?
<br />
A := B, [ C ], [ D ], [ E ], [ F ], G ;
<br />
A0 := ;
<br />
A0 := C;
<br />
A1 := ;
<br />
A1 := D;
<br />
A2 := ;
<br />
A2 := E;
<br />
A3 := ;
<br />
A3 := F;
<br />
A4 := B, A0, A1, A2, A3, G; (* final rule = A *)

<h2>Alternatives</h2>
A := B | C;
<br />
replaced with N rules - one for each alternative branch:
<br />
A1 := B;
<br />
A1 := C;


</body>
</html>
