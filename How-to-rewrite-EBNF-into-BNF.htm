<!DOCTYPE html>
<html>
<head>
<meta charset="utf8" />
<title>How to rewrite EBNF into BNF</title>
</head>
<body>

<table><tr><td style="vertical-align:top;">
<h1>How to rewrite EBNF into BNF</h1>
</td><td style="vertical-align:top;">
&nbsp;
<br />
&nbsp;
</td></tr></table>

EBNF have 3 additional constructs:
<br />
- repetitions
<br />
- optional parts
<br />
- alternatives

<h2>Repetitions</h2>
Can be replaced with additional recursive rule
<br />
<br />
A := B, { C }, D ; (* repetition of C *)
<br />
can be replaced with
<br />
<br />
A0 := C, A0; // supplementary rule, which express repetition through tail recursion
<br />
A1 := B, A0, D; (* final rule = A *)

<h2>Optional parts</h2>
A := B, [ C ], D ; (* C is optional *)
<br />
replaced with 2 rules
<br />
A1 := B, D ;
<br />
A1 := B, C, D ;
<br />
<br />
What if there N optional parts (and 2<sup>N</sup> variants of their presence)?
<br />
A := B, [ C ], [ D ], [ E ], [ F ], G ;
<br />
A0 := B; (* supplementary rule *)
<br />
A0 := B, C;
<br />
A1 := A0;
<br />
A1 := A0, D;
<br />
A2 := A1;
<br />
A2 := A1, E;
<br />
A3 := A2;
<br />
A3 := A2, F;
<br />
A4 := A3, G; (* final rule = A *)

<h2>Alternatives</h2>
A := B | C;
<br />
replaced with N rules - one for each alternative branch:
<br />
A1 := B;
<br />
A1 := C;


</body>
</html>
